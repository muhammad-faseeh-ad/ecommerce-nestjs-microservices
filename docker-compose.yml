version: '3.8'
services:
  auth:
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
    container_name: auth_service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      DB_URI: mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - mongo-setup

  products:
    build:
      context: .
      dockerfile: apps/products/Dockerfile
    container_name: products_service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      DB_URI: mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - mongo-setup

  orders:
    build:
      context: .
      dockerfile: apps/orders/Dockerfile
    container_name: orders_service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      DB_URI: mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - mongo-setup

  ecommerce-app:
    build:
      context: .
      dockerfile: apps/ecommerce-app/Dockerfile
    container_name: ecommerce_gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DB_URI: mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - auth
      - products
      - orders

  mongo1:
    image: mongo
    container_name: mongo1
    ports:
      - "27017:27017"
    volumes:
      - mongo1_data:/data/db
    command: ["mongod", "--replSet", "rs0"]

  mongo2:
    image: mongo
    container_name: mongo2
    ports:
      - "27018:27017"
    volumes:
      - mongo2_data:/data/db
    command: ["mongod", "--replSet", "rs0"]

  mongo3:
    image: mongo
    container_name: mongo3
    ports:
      - "27019:27017"
    volumes:
      - mongo3_data:/data/db
    command: ["mongod", "--replSet", "rs0"]

  mongo-setup:
    image: mongo
    container_name: mongo-setup
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    entrypoint: >
      bash -c '
        apt-get update && apt-get install -y mongodb-mongosh;
        sleep 10;
        echo "rs.initiate({
          _id: \"rs0\",
          members: [
            { _id: 0, host: \"mongo1:27017\" },
            { _id: 1, host: \"mongo2:27017\" },
            { _id: 2, host: \"mongo3:27017\" }
          ]
        })" | mongosh --host mongo1:27017
        '

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
